# Default values for emeis.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- How many emeis Pods to deploy
replicaCount: 1

image:
  repository: ghcr.io/projectcaluma/emeis
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /emeis/api
          pathType: Prefix
        - path: /emeis(/|$)(.*)
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# -- Name of an existing secret that contains a SECRET_KEY and DATABASE_PASSWORD
existingSecret: ""

emeis:
  env: production
  secretKey: ""
  allowedHosts: "*"
  allowAnonymousWrite: "true"
  languages:
    - de
    - en
  visibilityClasses: ""
  permissionClasses: ""
  postgresql:
    # -- Gets used when postgresql.enabled = false
    username: ""
    # -- Gets used when postgresql.enabled = false
    existingHost: ""
    # -- Gets used when postgresql.enabled = false
    database: ""
  additionalEnvironmentVariables: []

postgresql:
  # -- Disable the included PostgreSQL deployment for production
  enabled: true
  auth:
    database: emeis
    username: emeis
  primary:
    initdb:
      scripts:
        # -- Load HSTORE extension
        # @default -- -
        create_extension_hstore.sh: |
          # !/bin/sh
          #
          # This script is being used to temporarily switch socket connections to trusted
          # to enable the hstore extension in the database above.
          set -xeuf -o pipefail
          sed -E -i 's/local +all +all +md5/local all all trust/' /opt/bitnami/postgresql/conf/pg_hba.conf
          pg_ctl reload
          psql --username=postgres --dbname="${POSTGRES_DATABASE}" --command 'CREATE EXTENSION IF NOT EXISTS hstore;' --echo-errors
          sed -E -i 's/local +all +all +trust/local all all md5/' /opt/bitnami/postgresql/conf/pg_hba.conf
          pg_ctl reload
