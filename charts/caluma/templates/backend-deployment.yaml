apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "caluma.fullname" . }}-backend
  labels:
{{ include "caluma.labels" . | indent 4 }}
    app.kubernetes.io/component: backend
  annotations:
    checksum/backend-secret: {{ include (print $.Template.BasePath "/backend-secret.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "caluma.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "caluma.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: backend
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.backend.repository }}:{{ if .Values.image.backend.tag }}{{ .Values.image.backend.tag }}{{ else }}{{ .Chart.AppVersion }}{{ end }}"
          imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
          env:
            - name: DATABASE_HOST
              value: "{{ template "caluma.fullname" . }}-postgresql"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_USER
              value: "{{ .Values.postgresql.global.postgresql.auth.username }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "caluma.fullname" . }}-postgresql"
                  key: password
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ template "caluma.fullname" . }}-backend"
                  key: secretkey
            - name: ALLOWED_HOSTS
              value: "{{ .Values.allowedHosts }}"
            - name: VISIBILITY_CLASSES
              value: "caluma.caluma_core.visibilities.Any"
            - name: PERMISSION_CLASSES
              value: "caluma.caluma_core.permissions.AllowAny"
{{- if .Values.backend.additionalEnvironment }}
{{ toYaml .Values.backend.additionalEnvironment | indent 12 }}
{{- end }}
{{- if .Values.minio.enabled }}
            - name: MINIO_STORAGE_ENDPOINT
              value: "{{ index .Values.minio.ingress.hosts 0 }}"
            - name: MINIO_STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ template "caluma.fullname" . }}-minio"
                  key: accesskey
            - name: MINIO_STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ template "caluma.fullname" . }}-minio"
                  key: secretkey
            - name: MINIO_STORAGE_USE_HTTPS
              value: "{{ if $.Values.minio.ingress.tls }}true{{ else }}false{{ end }}"
            - name: MINIO_STORAGE_MEDIA_BUCKET_NAME
              value: "{{ .Values.minio.defaultBucket.name }}"
            - name: MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET
              value: "false"
{{- end }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            # TODO: define better livenessProbe
            tcpSocket:
              port: http
          readinessProbe:
            # TODO: define better readinessProbe
            tcpSocket:
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.image.backend.imagePullSecrets }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
